Estructura de dades

1. Estructures estàtiques i dinàmiques
1.1 Arrays Unidimensionals
Els arrays són estructures de dades de mida fixa.
Accés a elements: array[index].
Assignació d'elements: array[index] = valor.
Longitud de l'array: array.length.
Recorregut:
java
Copy
for (int i = 0; i < array.length; i++) {
    System.out.println(array[i]);
}
Ordenació: Arrays.sort(array).
Còpia: Arrays.copyOf(array, novaMida).
Cerca binària: Arrays.binarySearch(array, valor).

1.2 Arrays Bidimensionals (Matrius)
Les matrius són arrays de dues dimensions.
Accés a elements: matriu[fila][columna].
Assignació d'elements: matriu[fila][columna] = valor.
Longitud de files i columnes:
java
Copy
int files = matriu.length;
int columnes = matriu[0].length;
Recorregut:
java
Copy
for (int i = 0; i < matriu.length; i++) {
    for (int j = 0; j < matriu[i].length; j++) {
        System.out.print(matriu[i][j] + " ");
    }
    System.out.println();
}

1.3 Cadenes de caràcters (Strings)
1.3.1 Operacions amb Strings
charAt(int index): Retorna el caràcter en la posició index.
length(): Retorna la longitud del String.
substring(int beginIndex, int endIndex): Retorna una subcadena.
indexOf(String str): Retorna l'índex de la primera aparició de str.
equals(String str): Compara dos Strings.
toLowerCase(): Converteix a minúscules.
toUpperCase(): Converteix a majúscules.
trim(): Elimina espais en blanc als extrems.
replace(char oldChar, char newChar): Reemplaça caràcters.
split(String regex): Divideix el String en un array.
1.3.2 Operacions Regulars (Regex)
Pattern.compile(String regex): Compila una expressió regular.
Matcher.matches(): Comprova si el text coincideix amb el patró.
Matcher.find(): Cerca la següent coincidència.
String.matches(String regex): Comprova si el String coincideix amb el patró.
String.replaceAll(String regex, String replacement): Reemplaça totes les coincidències.
String.split(String regex): Divideix el String segons el patró.
1.3.3 StringBuilder
append(String str): Afegeix una cadena al final.
insert(int offset, String str): Insereix una cadena en una posició específica.
delete(int start, int end): Elimina caràcters.
reverse(): Inverteix el contingut.
toString(): Converteix a String.
length(): Retorna la longitud.
charAt(int index): Retorna el caràcter en la posició index.

2. Col·leccions
2.1 Llista - ArrayList
add(E e): Afegeix un element.
get(int index): Retorna l'element en la posició index.
remove(int index): Elimina l'element en la posició index.
size(): Retorna el nombre d'elements.
contains(Object o): Comprova si conté l'element.
clear(): Elimina tots els elements.
2.2 Conjunt - HashSet
add(E e): Afegeix un element.
remove(Object o): Elimina un element.
contains(Object o): Comprova si conté l'element.
size(): Retorna el nombre d'elements.
clear(): Elimina tots els elements.
2.3 Diccionari - HashMap
put(K key, V value): Afegeix una parella clau-valor.
get(K key): Retorna el valor associat a la clau.
remove(K key): Elimina la parella clau-valor.
containsKey(K key): Comprova si conté la clau.
size(): Retorna el nombre de parelles clau-valor.
clear(): Elimina totes les parelles.
2.4 Generecitat
Classes genèriques: Permeten treballar amb qualsevol tipus de dades.
java
Copy
public class Caixa<T> {
    private T contingut;
    public void setContingut(T contingut) {
        this.contingut = contingut;
    }
    public T getContingut() {
        return contingut;
    }
}
Mètodes genèrics: Accepten qualsevol tipus de dades.
java
Copy
public <T> void imprimir(T element) {
    System.out.println(element);
}
Comodins: Milloren la flexibilitat dels tipus genèrics.
<?>: Qualsevol tipus.
<? extends T>: Tipus T o subclasses.
<? super T>: Tipus T o superclasses.

3. Operacions Agregades (Streams)
Operacions Intermèdies
filter(Predicate<T> predicate): Filtra elements.
map(Function<T, R> mapper): Transforma elements.
sorted(): Ordena elements.
distinct(): Elimina duplicats.
limit(long maxSize): Limita el nombre d'elements.
Operacions Terminals
forEach(Consumer<T> action): Executa una acció per a cada element.
collect(Collector<T, A, R> collector): Transforma el Stream en una col·lecció.
count(): Retorna el nombre d'elements.
anyMatch(Predicate<T> predicate): Comprova si algun element compleix la condició.
allMatch(Predicate<T> predicate): Comprova si tots els elements compleixen la condició.
reduce(BinaryOperator<T> accumulator): Redueix els elements a un sol valor.

